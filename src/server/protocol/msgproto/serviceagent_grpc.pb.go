// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: msgproto/serviceagent.proto

package msgproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Serviceagent_Register_FullMethodName  = "/msgproto.Serviceagent/Register"
	Serviceagent_Channel_FullMethodName   = "/msgproto.Serviceagent/Channel"
	Serviceagent_Join_FullMethodName      = "/msgproto.Serviceagent/Join"
	Serviceagent_Leave_FullMethodName     = "/msgproto.Serviceagent/Leave"
	Serviceagent_ReConnect_FullMethodName = "/msgproto.Serviceagent/ReConnect"
	Serviceagent_Heartbeat_FullMethodName = "/msgproto.Serviceagent/Heartbeat"
)

// ServiceagentClient is the client API for Serviceagent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceagentClient interface {
	Register(ctx context.Context, in *ServerRegister, opts ...grpc.CallOption) (*ServerRegister, error)
	Channel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CommonMessage, CommonMessage], error)
	// 加入
	Join(ctx context.Context, in *JoinMessage, opts ...grpc.CallOption) (*JoinMessage, error)
	// 离开
	Leave(ctx context.Context, in *LeaveMessage, opts ...grpc.CallOption) (*LeaveMessage, error)
	// 重入
	ReConnect(ctx context.Context, in *JoinMessage, opts ...grpc.CallOption) (*JoinMessage, error)
	// 心跳
	Heartbeat(ctx context.Context, in *HeartbeatMessage, opts ...grpc.CallOption) (*HeartbeatMessage, error)
}

type serviceagentClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceagentClient(cc grpc.ClientConnInterface) ServiceagentClient {
	return &serviceagentClient{cc}
}

func (c *serviceagentClient) Register(ctx context.Context, in *ServerRegister, opts ...grpc.CallOption) (*ServerRegister, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerRegister)
	err := c.cc.Invoke(ctx, Serviceagent_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceagentClient) Channel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CommonMessage, CommonMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Serviceagent_ServiceDesc.Streams[0], Serviceagent_Channel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CommonMessage, CommonMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Serviceagent_ChannelClient = grpc.BidiStreamingClient[CommonMessage, CommonMessage]

func (c *serviceagentClient) Join(ctx context.Context, in *JoinMessage, opts ...grpc.CallOption) (*JoinMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinMessage)
	err := c.cc.Invoke(ctx, Serviceagent_Join_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceagentClient) Leave(ctx context.Context, in *LeaveMessage, opts ...grpc.CallOption) (*LeaveMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveMessage)
	err := c.cc.Invoke(ctx, Serviceagent_Leave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceagentClient) ReConnect(ctx context.Context, in *JoinMessage, opts ...grpc.CallOption) (*JoinMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinMessage)
	err := c.cc.Invoke(ctx, Serviceagent_ReConnect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceagentClient) Heartbeat(ctx context.Context, in *HeartbeatMessage, opts ...grpc.CallOption) (*HeartbeatMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatMessage)
	err := c.cc.Invoke(ctx, Serviceagent_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceagentServer is the server API for Serviceagent service.
// All implementations must embed UnimplementedServiceagentServer
// for forward compatibility.
type ServiceagentServer interface {
	Register(context.Context, *ServerRegister) (*ServerRegister, error)
	Channel(grpc.BidiStreamingServer[CommonMessage, CommonMessage]) error
	// 加入
	Join(context.Context, *JoinMessage) (*JoinMessage, error)
	// 离开
	Leave(context.Context, *LeaveMessage) (*LeaveMessage, error)
	// 重入
	ReConnect(context.Context, *JoinMessage) (*JoinMessage, error)
	// 心跳
	Heartbeat(context.Context, *HeartbeatMessage) (*HeartbeatMessage, error)
	mustEmbedUnimplementedServiceagentServer()
}

// UnimplementedServiceagentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceagentServer struct{}

func (UnimplementedServiceagentServer) Register(context.Context, *ServerRegister) (*ServerRegister, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedServiceagentServer) Channel(grpc.BidiStreamingServer[CommonMessage, CommonMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Channel not implemented")
}
func (UnimplementedServiceagentServer) Join(context.Context, *JoinMessage) (*JoinMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedServiceagentServer) Leave(context.Context, *LeaveMessage) (*LeaveMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedServiceagentServer) ReConnect(context.Context, *JoinMessage) (*JoinMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReConnect not implemented")
}
func (UnimplementedServiceagentServer) Heartbeat(context.Context, *HeartbeatMessage) (*HeartbeatMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedServiceagentServer) mustEmbedUnimplementedServiceagentServer() {}
func (UnimplementedServiceagentServer) testEmbeddedByValue()                      {}

// UnsafeServiceagentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceagentServer will
// result in compilation errors.
type UnsafeServiceagentServer interface {
	mustEmbedUnimplementedServiceagentServer()
}

func RegisterServiceagentServer(s grpc.ServiceRegistrar, srv ServiceagentServer) {
	// If the following call pancis, it indicates UnimplementedServiceagentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Serviceagent_ServiceDesc, srv)
}

func _Serviceagent_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceagentServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Serviceagent_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceagentServer).Register(ctx, req.(*ServerRegister))
	}
	return interceptor(ctx, in, info, handler)
}

func _Serviceagent_Channel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceagentServer).Channel(&grpc.GenericServerStream[CommonMessage, CommonMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Serviceagent_ChannelServer = grpc.BidiStreamingServer[CommonMessage, CommonMessage]

func _Serviceagent_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceagentServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Serviceagent_Join_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceagentServer).Join(ctx, req.(*JoinMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Serviceagent_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceagentServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Serviceagent_Leave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceagentServer).Leave(ctx, req.(*LeaveMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Serviceagent_ReConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceagentServer).ReConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Serviceagent_ReConnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceagentServer).ReConnect(ctx, req.(*JoinMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Serviceagent_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceagentServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Serviceagent_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceagentServer).Heartbeat(ctx, req.(*HeartbeatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Serviceagent_ServiceDesc is the grpc.ServiceDesc for Serviceagent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Serviceagent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msgproto.Serviceagent",
	HandlerType: (*ServiceagentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Serviceagent_Register_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _Serviceagent_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _Serviceagent_Leave_Handler,
		},
		{
			MethodName: "ReConnect",
			Handler:    _Serviceagent_ReConnect_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Serviceagent_Heartbeat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Channel",
			Handler:       _Serviceagent_Channel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "msgproto/serviceagent.proto",
}
